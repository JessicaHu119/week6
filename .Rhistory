knitr::opts_chunk$set(echo = TRUE)
options(digits=2)
# Install bookdown for rendering because we'll need this. While we're at it, lets also install /load the tidyverse
p_load(bookdown, tidyverse, ggforce, flextable, latex2exp, png, magick) # basically just list all the packages you want here
library(pacman)
# Install bookdown for rendering because we'll need this. While we're at it, lets also install /load the tidyverse
p_load(bookdown, tidyverse, ggforce, flextable, latex2exp, png, magick) # basically just list all the packages you want here
path <- "data/OA_activitydat_20190302_BIOL3207.csv"
data <- read_csv(path)
OA <- data %>% filter(!(is.na(activity))) %>% filter(!(is.na(animal_id)))
OA <- data %>% filter(!(is.na(activity)))
View(data)
View(OA)
# Check spelling in species and treatment but also generate a summary table
?spellcheck
# Check spelling in species and treatment but also generate a summary table
??spellcheck
# Check spelling in species and treatment but also generate a summary table
?spell_check_files()
# Check spelling in species and treatment but also generate a summary table
??spell_check_files()
# Check spelling in species and treatment but also generate a summary table
?spell_check_files()
# Check spelling in species and treatment but also generate a summary table
?spell_check_package()
# Check spelling in species and treatment but also generate a summary table
?knitr
knitr::opts_chunk$set(echo = TRUE)
options(digits=2)
##  GitHub is not a very good backup, it doesn't automatically back up my updates in real time. Whenever I make a change, I have to manually go to GitHub Desktop to update it and then upload it to the web version. Also, it doesn't keep every version of my changes. In summary, we can't rely on GitHub as a backup.
library(pacman)
# Install bookdown for rendering because we'll need this. While we're at it, lets also install /load the tidyverse
p_load(bookdown, tidyverse, ggforce, flextable, latex2exp, png, magick) # basically just list all the packages you want here
path <- "data/OA_activitydat_20190302_BIOL3207.csv"
path <- "data/OA_activitydat_20190302_BIOL3207.csv"
data <- read_csv(path)
path <- "output/OA_activitydat_20190302_BIOL3207.csv"
write_csv(data, file = path)
# Code to removing missing data from the `OA_activitydat_20190302_BIOL3207.csv` data frame.
library(tidyverse)
OA <- data %>% filter(!(is.na(activity)))
# Drop irrelevant columns
OA_data <- OA %>% select(species, treatment, animal_id, activity)
# Check spelling in species and treatment but also generate a summary table
# Use flextable to render the summary table in a tidy format
# Check spelling in species and treatment but also generate a summary table
?Hanspell
# Check spelling in species and treatment but also generate a summary table
?Hunspell
# Check spelling in species and treatment but also generate a summary table
??Hunspell
# Check spelling in species and treatment but also generate a summary table
??spellcheck
View(OA_data)
# Check spelling in species and treatment but also generate a summary table
str(OA_data)
# Check spelling in species and treatment but also generate a summary table
OA_data_species <- count(OA_data$species)
# Check spelling in species and treatment but also generate a summary table
library(tidyverse)
# Check spelling in species and treatment but also generate a summary table
library(tidyverse)
OA_data_species <- count(OA_data$species)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
# install.packages('palmerpenguins')
install.packages('palmerpenguins')
library(palmerpenguins)
head(penguins)
str(penguins)
head(penguins)
view(penguins)
#Missing data
sum(is.na(penguins$sex))
#Completed data (except missing data)
sum(complete.cases(penguins$sex))
ggplot(data = penguins, mapping = aes(x = bill_length_mm, y = flipper_length_mm)) +
geom_point()
cor.test(penguins$bill_length_mm,penguins$flipper_length_mm)
ggplot(data = penguins, mapping = aes(x = bill_length_mm, y = flipper_length_mm)) +
geom_point() + geom_smooth(method='lm')
cor.test(penguins$body_mass_g,penguins$bill_depth_mm)
ggplot(data = penguins, mapping = aes(x = body_mass_g, y = bill_depth_mm)) +
geom_point() + geom_smooth(method='lm')
ggplot(data = penguins, mapping = aes(x = body_mass_g, y = bill_depth_mm)) +
geom_point()
ggplot(data = penguins, mapping = aes(x = body_mass_g, y = bill_depth_mm)) +
geom_point() + geom_smooth(method='lm')
ggplot(data = penguins, mapping = aes(x = species,y = body_mass_g, fill= species)) +
geom_boxplot()
ggplot(data = penguins, mapping = aes(x = species,y = body_mass_g, fill= species)) + geom_violin() + geom_jitter(width=0.2, height=0)
ggplot(data = penguins, mapping = aes(x = body_mass_g, y = bill_depth_mm, colour= species)) + geom_point()
ggplot(data = penguins, mapping = aes(x = body_mass_g, y = bill_depth_mm, colour= species)) + geom_point()+ geom_smooth(span = 0.8)
common_slope_model <- lm(bill_depth_mm~body_mass_g+species,data=penguins)
summary(common_slope_model)
different_slope_model <- lm(bill_depth_mm~body_mass_g*species,data=penguins)
summary(different_slope_model)
permuted_penguins <- penguins
permuted_penguins$species <- permuted_penguins$species[sample(length(penguins$species))]
head(permuted_penguins)
ggplot(data = permuted_penguins, mapping = aes(x = body_mass_g, y = bill_depth_mm, colour=species)) +
geom_point() + geom_smooth(method='lm')
ggplot(data = permuted_penguins, mapping = aes(x = species,y = body_mass_g,colour=species)) +
geom_boxplot()
# This code block creates a plot matrix comparing the actual body mass box plot (upper right) to those obtained from many permutations
# Build a tibble to store the data, beginning with the actual data
perm_tibble <- penguins %>% select(species,body_mass_g)
# Set the number of permutations, here 24 for better viewing
n_reps <- 24
# Grow the tibble column by column with permuted values
for (i in 1:n_reps)
{
# Name the permutation reps P1,P2,...
new_name <- paste("P",i,sep="")
# Generate a permuted column of body mass values. Note that this is equivalent     to permuting the species labels; however, permuting values makes the plotting     easier
new_col <- tibble(penguins$body_mass_g[sample(length(penguins$species))])
# Assign the new column its name
colnames(new_col) <- new_name
# Attach the permuted column to the end of the growing tibble
perm_tibble <- cbind(perm_tibble,new_col)
}
# Record the order of the column names for later use as plot order
factor_levels <- colnames(perm_tibble)[2:(n_reps+2)]
# Pivot the tibble built above into long form
plot_tibble <- pivot_longer(perm_tibble,cols=2:(n_reps+2),names_to = c("rep"))
# Turn the rep column into a factor, using the order stored above
plot_tibble$rep <- factor(plot_tibble$rep,levels=factor_levels)
# Plot a matrix of box plots, beginning with the real data, followed from left to right with P1,P2,etc. Set the number of columns in the plot matrix to 5 for viewing. Remove the x-axis annotations.
ggplot(plot_tibble,aes(x=species,y=value,colour=species))+geom_boxplot()+facet_wrap(~rep,ncol=5)+theme(axis.title.x=element_blank(),axis.text.x=element_blank(),axis.ticks.x=element_blank())
penguins %>% count(species,island)
penguins %>% filter(species == "Adelie") %>% ggplot(mapping = aes(x = island,y = body_mass_g,colour=island)) + geom_boxplot()
penguins %>% filter(species == "Adelie") %>% ggplot(mapping = aes(x = body_mass_g,y = bill_depth_mm,colour=island)) + geom_point() + geom_smooth()
penguins %>% count(species,sex)
penguins %>% filter(!(is.na(sex))) %>% count(species,sex)
penguins_data <- penguins %>% filter(!(is.na(sex)))
ggplot(penguins_data, mapping = aes(y = body_mass_g,x = species,fill=sex))  + geom_boxplot() + geom_jitter(width=0.2, height=0) + facet_wrap(~sex)
ggplot(penguins_data, mapping = aes(y = body_mass_g,x = sex,fill = species)) + geom_boxplot() + geom_jitter(width=0.2, height=0) + facet_wrap(~species)
ggplot(data = penguins_data, mapping = aes(x = body_mass_g, y = bill_depth_mm, colour=species, shape = sex)) +
geom_point() + geom_smooth(method='lm')
#install.packages('GGally')
library(GGally)
penguins %>% select(bill_length_mm,bill_depth_mm,flipper_length_mm,body_mass_g) %>%
ggpairs()
penguins %>% select(bill_length_mm,bill_depth_mm,flipper_length_mm,body_mass_g,species) %>% ggpairs(aes(colour = species))
penguins %>% filter(!(is.na(sex))) %>% select(bill_length_mm,bill_depth_mm,flipper_length_mm,body_mass_g,sex) %>% ggpairs(aes(colour = sex,alpha = 0.4))
penguins %>% filter(!(is.na(sex))) %>% mutate(year = as.factor(year)) %>% ggplot(mapping = aes(x = species,y=flipper_length_mm, colour=species)) + geom_boxplot() +
geom_jitter(width = 0.2, height = 0, alpha = 0.4) + facet_grid(sex ~ year) + theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
OA_data_species <- OA_data %>% count(species)
OA_data %>% count(species)
OA_data %>% count(species,treatment)
# Use flextable to render the summary table in a tidy format
mean(OA_data$activity)
std.error(OA_data)
library(plotrix)
install.packages("plotrix")
install.packages("Rtools")
install.packages('plotrix')
library(plotrix)
std.error(OA_data)
std.error(OA_data$activity)
?dplyr
OA_data %>% count(species,treatment)
# Use flextable to render the summary table in a tidy format
tapply(OA_data$activity,INDEX=OA_data$species,FUN=mean)
OA_data %>%group_by(species)%>%summarise(mean=mean(activity))
OA_data %>%group_by(species)%>%summarise(mean=mean(activity), sd=sd(activity))
tapply(OA_data$activity,INDEX=OA_data$species,FUN=sd)
OA_data %>%group_by(species)%>%summarise(mean=mean(activity), sd=sd(activity))
OA_data %>% count(species,treatment)
# Use flextable to render the summary table in a tidy format
OA_data %>%group_by(species, treatment)%>%summarise(mean=mean(activity), sd=sd(activity))
# Use flextable to render the summary table in a tidy format
OA_data %>%group_by(species, treatment)%>%summarise(mean=mean(activity), sd=sd(activity), n=count(species,treatment))
# Use flextable to render the summary table in a tidy format
OA_data %>%group_by(species, treatment)%>%summarise(mean=mean(activity), sd=sd(activity), n=OA_data %>%count(species,treatment))
# Use flextable to render the summary table in a tidy format
OA_data %>%group_by(species, treatment)%>%summarise(mean=mean(activity), sd=sd(activity), n=num(species,treatment))
# Use flextable to render the summary table in a tidy format
OA_data %>%group_by(species, treatment)%>%summarise(mean=mean(activity), sd=sd(activity), n=number(species,treatment))
# Use flextable to render the summary table in a tidy format
OA_data %>%group_by(species, treatment)%>%summarise(mean=mean(activity), sd=sd(activity), n=sum(species,treatment))
# Use flextable to render the summary table in a tidy format
OA_data %>%group_by(species, treatment)%>%summarise(mean=mean(activity), sd=sd(activity), n=length(species,treatment))
OA_data %>% count(species,treatment)
# Use flextable to render the summary table in a tidy format
OA_data %>%group_by(species, treatment)%>%summarise(mean=mean(activity), sd=sd(activity), n=length(activity))
?flextable()
# Use flextable to render the summary table in a tidy format
OA_new <- OA_data %>%group_by(species, treatment)%>%summarise(mean=mean(activity), sd=sd(activity), number=length(activity))
fd <- flextable(OA_new)
fd
ft <- flextable(OA_new)
ft <- theme_vanilla(ft)
ft <- color(ft, part = "footer", color = "#666666")
ft <- set_caption(ft, caption = "New York Air Quality Measurements")
ft
ft <- flextable(OA_new)
ft <- theme_vanilla(ft)
ft <- color(ft, color = "#666666")
ft <- set_caption(ft, caption = "Mean, Standard Error And The Sample Sizes")
ft
ft <- flextable(OA_new)
ft <- theme_vanilla(ft)
ft <- color(ft, color = "#666666")
ft <- set_caption(ft, caption = "Mean, Standard Error And The Sample Sizes")
ft
ft <- flextable(OA_new)
ft <- theme_vanilla(ft)
ft <- color(ft, color = "#666666")
ft <- set_caption(ft, color="black", caption = "Mean, Standard Error And The Sample Sizes")
ft <- set_caption(ft, color="#666666", caption = "Mean, Standard Error And The Sample Sizes")
ft <- flextable(OA_new)
ft <- theme_vanilla(ft)
ft <- color(ft, color = "#666666")
ft <- set_caption(ft, caption = "Mean, Standard Error And The Sample Sizes")
ft
ft <- flextable(OA_new)
ft <- theme_vanilla(ft,background.color = "#EFEFEF")
ft <- flextable(OA_new)
ft <- theme_vanilla(ft)
ft <- color(ft ,background.color = "#EFEFEF")
ft <- flextable(OA_new)
ft <- theme_vanilla(ft)
ft <- color(ft, part = "theme_vanilla",color = "#EFEFEF")
ft <- color(ft, part = "body",color = "#EFEFEF")
ft <- flextable(OA_new)
ft <- theme_vanilla(ft)
ft <- color(ft, part = "body",color = "#EFEFEF")
ft <- set_caption(ft, caption = "Mean, Standard Error And The Sample Sizes")
ft
ft <- color(ft, part = "body",color = "#666666")
ft <- flextable(OA_new)
ft <- theme_vanilla(ft)
ft <- color(ft, part = "body",color = "#666666")
ft <- set_caption(ft, caption = "Mean, Standard Error And The Sample Sizes")
ft
ft <- flextable(OA_new)
ft <- theme_vanilla(ft)
ft <- color(ft, part = "body",color = "262-grey1")
ft <- set_caption(ft, caption = "Mean, Standard Error And The Sample Sizes")
ft
ft <- flextable(OA_new)
ft <- theme_vanilla(ft)
ft <- color(ft, part = "body",color = "262")
ft <- set_caption(ft, caption = "Mean, Standard Error And The Sample Sizes")
ft
ft <- flextable(OA_new)
ft <- theme_vanilla(ft)
ft <- color(ft, part = "body",color = "grey1")
ft <- set_caption(ft, caption = "Mean, Standard Error And The Sample Sizes")
ft
ft <- color(ft, part = "body","header",color = "grey1","grey2")
ft <- flextable(OA_new)
ft <- theme_vanilla(ft)
ft <- set_caption(ft, caption = "Mean, Standard Error And The Sample Sizes")
ft <- color(ft, part = "body","header",color = "grey1","grey2")
ft <- color(ft, part = "body1",color = "grey1")
ft <- color(ft, part = "body1",color = "grey1",part="header",color="grey2")
ft <- flextable(OA_new)
ft <- theme_vanilla(ft)
ft <- color(ft, part = "body",color = "#666666")
ft <- set_caption(ft, caption = "Mean, Standard Error And The Sample Sizes")
ft <- color(ft, part = "caption",color = "#666666")
ft <- flextable(OA_new)
ft <- theme_vanilla(ft)
ft <- color(ft, part = "body",color = "#666666")
ft <- set_caption(ft, caption = "Mean, Standard Error And The Sample Sizes")
ft
# ggplot figure showing mean activity for each treatment (Control, OA) for each species.
path <- "./output/figures/OA_activitydat_20190302_BIOL3207.csv"
write_csv(data, file = path)
path <- "data/OA_activitydat_20190302_BIOL3207.csv"
data <- read_csv(path)
path <- "./output/data/change"
write_csv(data, file = path)
path <- "./output/data/change"
write_csv(data, file = path)
# ggplot figure showing mean activity for each treatment (Control, OA) for each species.
path <- "./output/figures/OA_activitydat_20190302_BIOL3207.csv"
write_csv(data, file = path)
# ggplot figure showing mean activity for each treatment (Control, OA) for each species.
ggplot(OA_new, mapping = aes(y = activity,x = species,fill=treatment))  + geom_boxplot() + geom_jitter(width=0.2, height=0)
# ggplot figure showing mean activity for each treatment (Control, OA) for each species.
ggplot(OA_new, mapping = aes(x = species,fill=treatment))  + geom_boxplot() + geom_jitter(width=0.2, height=0)
# ggplot figure showing mean activity for each treatment (Control, OA) for each species.
ggplot(OA_data, mapping = aes(x = activity,fill=treatment))  + geom_boxplot() + geom_jitter(width=0.2, height=0)
# ggplot figure showing mean activity for each treatment (Control, OA) for each species.
ggplot(OA_data, mapping = aes(x = activity,fill=treatment)) + geom_boxplot() + geom_jitter(width=0.2, height=0)
# ggplot figure showing mean activity for each treatment (Control, OA) for each species.
ggplot(OA, mapping = aes(x = activity,fill=treatment)) + geom_boxplot() + geom_jitter(width=0.2, height=0)
# ggplot figure showing mean activity for each treatment (Control, OA) for each species.
ggplot(OA_data, mapping = aes(x = species,y=activity,fill=treatment)) + geom_boxplot() + geom_jitter(width=0.2, height=0)
# ggplot figure showing mean activity for each treatment (Control, OA) for each species.
ggplot(OA_data, mapping = aes(x = species,y=activity,fill=treatment)) + geom_boxplot() + geom_jitter(width=0.6, height=0)
# ggplot figure showing mean activity for each treatment (Control, OA) for each species.
ggplot(OA_data, mapping = aes(x = species,y=activity,fill=treatment)) + geom_boxplot() + geom_jitter(width=0.3, height=0)
# ggplot figure showing mean activity for each treatment (Control, OA) for each species.
ggplot(OA_data, mapping = aes(x = species,y=activity,fill=treatment)) + geom_boxplot()
?ggsave
# Use ggsave to save the figure
ggsave("./output/figures/difference.png",width = 4, height = 4)
# Use ggsave to save the figure
ggsave("./output/figures/difference.png",width = 10, height = 4)
